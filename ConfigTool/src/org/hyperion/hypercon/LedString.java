package org.hyperion.hypercon;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Locale;
import java.util.Vector;

import org.hyperion.hypercon.spec.ColorConfig;
import org.hyperion.hypercon.spec.DeviceConfig;
import org.hyperion.hypercon.spec.ImageProcessConfig;
import org.hyperion.hypercon.spec.Led;
import org.hyperion.hypercon.spec.LedFrameConstruction;
import org.hyperion.hypercon.spec.MiscConfig;
/**
 * The full configuration of Hyperion with sub-items for device, color and miscelanuous items. 
 */
public class LedString {
	
	/** The configuration of the output device */
	public DeviceConfig mDeviceConfig = new DeviceConfig();

	/** THe configuration of the 'physical' led frame */
	public LedFrameConstruction mLedFrameConfig = new LedFrameConstruction();
	/** The configuration of the image processing */
	public ImageProcessConfig mProcessConfig = new ImageProcessConfig();
	
	/** The color adjustment configuration */
	public ColorConfig mColorConfig = new ColorConfig();
	
	/** The miscellaneous configuration (bootsequence, blackborder detector, etc) */
	public MiscConfig mMiscConfig = new MiscConfig();
	
	/** The translation of the led frame construction and image processing to individual led configuration */
	public Vector<Led> leds;
	
	/**
	 * Writes the configuration to the given file
	 * 
	 * @param mFilename The absolute filename
	 * 
	 * @throws IOException If unable to write the given file
	 */
	public void saveConfigFile(String mFilename) throws IOException {
		
		try (FileWriter fw = new FileWriter(mFilename)) {
			fw.write("// Automatically generated configuration file for 'Hyperion daemon'\n");
			fw.write("// Generated by: HyperCon (The Hyperion deamon configuration file builder\n");
			fw.write("\n");
			fw.write("{\n");
			
			String deviceJson = mDeviceConfig.toJsonString();
			fw.write(deviceJson + ",\n\n");
			
			String colorJson = mColorConfig.toJsonString();
			fw.write(colorJson + ",\n\n");

			String ledJson = ledToJsonString();
			fw.write(ledJson + ",\n\n");
			
			String blackBorderJson = mProcessConfig.getBlackborderJson();
			fw.write(blackBorderJson + ",\n\n");
			
			String miscJson = mMiscConfig.toJsonString();
			fw.write(miscJson + "\n");
			
			fw.write("}\n");
		} catch (IOException e) {
			throw e;
		}
	}
	
	/**
	 * Converts the list with leds specifications to a JSON string as used by the Hyperion Deamon
	 * 
	 * @return The JSON string with led-specifications
	 */
	String ledToJsonString() {
		StringBuffer strBuf = new StringBuffer();
		
		strBuf.append("\t/// The configuration for each individual led. This contains the specification of the area \n");
		strBuf.append("\t/// averaged of an input image for each led to determine its color. Each item in the list \n");
		strBuf.append("\t/// contains the following fields:\n");
		strBuf.append("\t/// * index: The index of the led. This determines its location in the string of leds; zero \n");
		strBuf.append("\t///          being the first led.\n");
		strBuf.append("\t/// * hscan: The fractional part of the image along the horizontal used for the averaging \n");
		strBuf.append("\t///          (minimum and maximum inclusive)\n");
		strBuf.append("\t/// * vscan: The fractional part of the image along the vertical used for the averaging \n");
		strBuf.append("\t///          (minimum and maximum inclusive)\n");
		
		strBuf.append("\t\"leds\" : \n");
		strBuf.append("\t[\n");
		
		for (Led led : leds)
		{
			strBuf.append("\t\t{\n");
			strBuf.append(String.format(Locale.ROOT, "\t\t\t\"index\" : %d,\n", led.mLedSeqNr));
			strBuf.append(String.format(Locale.ROOT, "\t\t\t\"hscan\" : { \"minimum\" : %.4f, \"maximum\" : %.4f },\n", led.mImageRectangle.getMinX(), led.mImageRectangle.getMaxX()));
			strBuf.append(String.format(Locale.ROOT, "\t\t\t\"vscan\" : { \"minimum\" : %.4f, \"maximum\" : %.4f }\n", led.mImageRectangle.getMinY(), led.mImageRectangle.getMaxY()));
			if (led != leds.lastElement()) {
				strBuf.append("\t\t},\n");
			} else {
				strBuf.append("\t\t}\n");
			}
		}
		
		strBuf.append("\t]");
		
		return strBuf.toString();
	}
}
