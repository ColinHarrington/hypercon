package org.hyperion.hypercon;

import org.hyperion.hypercon.spec.BlackborderDetectorModel;
import org.hyperion.hypercon.spec.BootsequenceModel;
import org.hyperion.hypercon.spec.ColorConfigModel;
import org.hyperion.hypercon.spec.DeviceConfigModel;
import org.hyperion.hypercon.spec.EffectEngineModel;
import org.hyperion.hypercon.spec.ImageProcessModel;
import org.hyperion.hypercon.spec.LedFrameConstructionModel;
import org.hyperion.hypercon.spec.LedModel;
import org.hyperion.hypercon.spec.TcpServerModel;
import org.hyperion.hypercon.spec.DispmanxGrabberModel;
import org.hyperion.hypercon.spec.XbmcVideoCheckerModel;
import org.mufassa.model.AbstractModel;
import org.mufassa.model.ModelList;
import org.mufassa.model.json.JsonComment;

@JsonComment(
		"Automatically generated configuration file for 'Hyperion daemon'\n" +
		"Generated by: HyperCon (The Hyperion deamon configuration file builder")
public class LedStringModel extends AbstractModel {
	/** The configuration of the output device */
	public final ModelList<DeviceConfigModel> device = new ModelList<DeviceConfigModel>();
	{
		device.add(new DeviceConfigModel());
	}
	
	/** The color adjustment configuration */
	public final ColorConfigModel color = new ColorConfigModel();
	
	/** The translation of the led frame construction and image processing to individual led configuration */
	@JsonComment(
			"The configuration for each individual led. This contains the specification of the area \n" +
			" averaged of an input image for each led to determine its color. Each item in the list \n" +
			" contains the following fields: \n" +
			" * index: The index of the led. This determines its location in the string of leds; zero \n" + 
			"          being the first led. \n" +
			" * hscan: The fractional part of the image along the horizontal used for the averaging \n" + 
			"          (minimum and maximum inclusive) \n" +
			" * vscan: The fractional part of the image along the vertical used for the averaging \n" + 
			"          (minimum and maximum inclusive)")
	public final ModelList<LedModel> leds = new ModelList<LedModel>();

	/** The configuration of the blackborder detection and removal algorithm */
	public final BlackborderDetectorModel blackborderdetector = new BlackborderDetectorModel();
	
	/** The configuration of the effect-engine */
	public final EffectEngineModel effects = new EffectEngineModel();
	
	/** The configuration of the bootsequence */
	public final BootsequenceModel bootSequence = new BootsequenceModel();
	
	/** The configuration of the Dispmanx Video Grabber */
	public final DispmanxGrabberModel frameGrabber = new DispmanxGrabberModel();
	
	/** The configuration of the XBMC video checker */
	public final XbmcVideoCheckerModel xbmcVideoChecker = new XbmcVideoCheckerModel();
	
	/** The configuration of the JSON interface */
	public final TcpServerModel jsonServer = new TcpServerModel(true, 19444);
	/** The configuration of the PROTO interface */ 
	public final TcpServerModel protoServer = new TcpServerModel(true, 19445);
	/** The configuration of the Boblight interface */
	public final TcpServerModel boblightServer = new TcpServerModel(false, 19333);

	/** THe configuration of the 'physical' led frame */
	public final LedFrameConstructionModel ledFrameConfig = new LedFrameConstructionModel();
	
	/** The configuration of the image processing */
	public final ImageProcessModel processConfig = new ImageProcessModel();
}
